From 614dd9399e2f6f5230d2f209fe61bd0094f87123 Mon Sep 17 00:00:00 2001
From: Hiroshi Shirosaki <h.shirosaki@gmail.com>
Date: Tue, 22 Jul 2014 14:59:15 +0900
Subject: [PATCH 20/21] msys.dll: fix compile errors with gcc 4.8

---
 msys/rt/src/newlib/libc/ctype/ctype_.c    |  7 ++++++-
 msys/rt/src/winsup/Makefile.common        |  2 +-
 msys/rt/src/winsup/cygwin/Makefile.in     |  2 +-
 msys/rt/src/winsup/cygwin/autoload.cc     |  8 ++++----
 msys/rt/src/winsup/cygwin/cygheap.cc      | 26 ++++++++++++--------------
 msys/rt/src/winsup/cygwin/dcrt0.cc        |  6 +++---
 msys/rt/src/winsup/cygwin/debug.cc        | 10 +++++-----
 msys/rt/src/winsup/cygwin/debug.h         |  2 +-
 msys/rt/src/winsup/cygwin/errno.cc        | 10 +++++-----
 msys/rt/src/winsup/cygwin/exceptions.cc   |  8 +++++---
 msys/rt/src/winsup/cygwin/fhandler.cc     |  2 +-
 msys/rt/src/winsup/cygwin/include/wchar.h | 30 ------------------------------
 msys/rt/src/winsup/cygwin/miscfuncs.cc    | 14 +++++++-------
 msys/rt/src/winsup/cygwin/path.cc         | 11 +++++------
 msys/rt/src/winsup/cygwin/perthread.h     |  2 +-
 msys/rt/src/winsup/cygwin/sigproc.cc      | 10 +++++-----
 msys/rt/src/winsup/cygwin/spawn.cc        |  2 +-
 msys/rt/src/winsup/cygwin/syscalls.cc     |  4 ++--
 msys/rt/src/winsup/cygwin/winsup.h        |  2 +-
 19 files changed, 66 insertions(+), 92 deletions(-)
 delete mode 100644 msys/rt/src/winsup/cygwin/include/wchar.h

diff --git a/msys/rt/src/newlib/libc/ctype/ctype_.c b/msys/rt/src/newlib/libc/ctype/ctype_.c
index 54f92d9..d4dcb72 100644
--- a/msys/rt/src/newlib/libc/ctype/ctype_.c
+++ b/msys/rt/src/newlib/libc/ctype/ctype_.c
@@ -85,7 +85,12 @@ static _CONST char _ctype_b[128 + 256] = {
 };
 
 #if defined(__CYGWIN__) || defined(__MSYS__)
-extern _CONST char __declspec(dllexport) _ctype_[1 + 256] __attribute__ ((alias ("_ctype_b+127")));
+__asm__ ("					\n\
+        .data					\n\
+	.globl  __ctype_			\n\
+	.set    __ctype_,__ctype_b+127		\n\
+	.text                                   \n\
+");
 _CONST char __declspec(dllexport) *__ctype_ptr = _ctype_b + 128;
 #else
 extern _CONST char _ctype_[1 + 256] __attribute__ ((alias ("_ctype_b+127")));
diff --git a/msys/rt/src/winsup/Makefile.common b/msys/rt/src/winsup/Makefile.common
index 78595d2..9e3e9d6 100644
--- a/msys/rt/src/winsup/Makefile.common
+++ b/msys/rt/src/winsup/Makefile.common
@@ -65,7 +65,7 @@ mingw_source:=$(updir)/mingw
 utils_build:=$(bupdir)/utils
 utils_source:=$(updir)/utils
 
-INCLUDES:=-I. -I$(cygwin_source)/include -I$(cygwin_source) -I$(newlib_source)/libc/sys/cygwin -I$(newlib_source)/libc/include -I$(w32api_include)
+INCLUDES:=-I. -I$(cygwin_source)/include -I$(cygwin_source) -I$(newlib_source)/libc/sys/cygwin -I$(newlib_source)/libc/include -I$(w32api_include) -isystem /usr/include
 ifdef CONFIG_DIR
 INCLUDES+=-I$(CONFIG_DIR)
 endif
diff --git a/msys/rt/src/winsup/cygwin/Makefile.in b/msys/rt/src/winsup/cygwin/Makefile.in
index c312fb4..f3ff060 100644
--- a/msys/rt/src/winsup/cygwin/Makefile.in
+++ b/msys/rt/src/winsup/cygwin/Makefile.in
@@ -218,7 +218,7 @@ winver_stamp: mkvers.sh include/cygwin/version.h winver.rc $(DLL_OFILES)
 	$(COMPILE_CXX) -o version.o version.cc
 
 cygrun.exe : cygrun.o
-	$(CC) -nodefaultlibs -o $@ $^ -lgcc $(LIB_NAME) -luser32 -lshell32 -lkernel32
+	$(CC) -o $@ $^ $(LIB_NAME) -luser32 -lshell32 -lkernel32
 
 #
 
diff --git a/msys/rt/src/winsup/cygwin/autoload.cc b/msys/rt/src/winsup/cygwin/autoload.cc
index 67d0bc0..7b513aa 100644
--- a/msys/rt/src/winsup/cygwin/autoload.cc
+++ b/msys/rt/src/winsup/cygwin/autoload.cc
@@ -201,8 +201,8 @@ union retchain
 };
 
 /* The standard DLL initialization routine. */
-static long long std_dll_init () __asm__ ("std_dll_init") __attribute__ ((unused));
-static long long
+long long std_dll_init () __asm__ ("std_dll_init") __attribute__ ((unused));
+long long
 std_dll_init ()
 {
   HANDLE h;
@@ -241,9 +241,9 @@ std_dll_init ()
 }
 
 /* Initialization function for winsock stuff. */
-static long long wsock_init () __asm__ ("wsock_init") __attribute__ ((unused, regparm(1)));
 bool NO_COPY wsock_started = 0;
-static long long
+long long wsock_init () __asm__ ("wsock_init") __attribute__ ((unused, regparm(1)));
+long long
 wsock_init ()
 {
   static LONG NO_COPY here = -1L;
diff --git a/msys/rt/src/winsup/cygwin/cygheap.cc b/msys/rt/src/winsup/cygwin/cygheap.cc
index ac4d8fa..76b9d12 100644
--- a/msys/rt/src/winsup/cygwin/cygheap.cc
+++ b/msys/rt/src/winsup/cygwin/cygheap.cc
@@ -65,7 +65,7 @@ init_cheap ()
   cygheap_max = cygheap + 1;
 }
 
-void __stdcall
+void __stdcall __attribute__ ((regparm(1)))
 cygheap_setup_for_child (child_info *ci)
 {
   void *newcygheap;
@@ -85,7 +85,7 @@ cygheap_setup_for_child (child_info *ci)
   return;
 }
 
-void __stdcall
+void __stdcall __attribute__ ((regparm(1)))
 cygheap_setup_for_child_cleanup (child_info *ci)
 {
   ForceCloseHandle1 (ci->cygheap_h, passed_cygheap_h);
@@ -166,7 +166,7 @@ _csbrk (int sbs)
     }
 
   lastheap = cygheap_max;
-  (char *) cygheap_max += sbs;
+  cygheap_max = (char *) cygheap_max + sbs;
   void *heapalign = (void *) pagetrunc (lastheap);
 
   if (!needalloc)
@@ -188,10 +188,9 @@ cygheap_init ()
 
 /* Copyright (C) 1997, 2000 DJ Delorie */
 
-static void *_cmalloc (int size) __attribute ((regparm(1)));
 static void *__stdcall _crealloc (void *ptr, int size) __attribute ((regparm(2)));
 
-static void *__stdcall
+static void *__stdcall __attribute ((regparm(1)))
 _cmalloc (int size)
 {
   _cmalloc_entry *rvc;
@@ -222,7 +221,7 @@ _cmalloc (int size)
   return rvc->data;
 }
 
-static void __stdcall
+static void __stdcall __attribute__((regparm(1)))
 _cfree (void *ptr)
 {
   cygheap_protect->acquire ();
@@ -233,8 +232,7 @@ _cfree (void *ptr)
   cygheap_protect->release ();
 }
 
-static void *__stdcall _crealloc (void *ptr, int size) __attribute__((regparm(2)));
-static void *__stdcall
+static void *__stdcall __attribute__((regparm(2)))
 _crealloc (void *ptr, int size)
 {
   void *newptr;
@@ -275,7 +273,7 @@ creturn (cygheap_types x, cygheap_entry * c, int len)
   return (void *) c->data;
 }
 
-extern "C" void *__stdcall
+extern "C" void *__stdcall __attribute__ ((regparm(2)))
 cmalloc (cygheap_types x, DWORD n)
 {
   cygheap_entry *c;
@@ -286,7 +284,7 @@ cmalloc (cygheap_types x, DWORD n)
   return creturn (x, c, n);
 }
 
-extern "C" void *__stdcall
+extern "C" void *__stdcall __attribute__ ((regparm(2)))
 crealloc (void *s, DWORD n)
 {
   MALLOC_CHECK;
@@ -302,7 +300,7 @@ crealloc (void *s, DWORD n)
   return creturn (t, c, n);
 }
 
-extern "C" void __stdcall
+extern "C" void __stdcall __attribute__ ((regparm(1)))
 cfree (void *s)
 {
   MALLOC_CHECK;
@@ -311,7 +309,7 @@ cfree (void *s)
   MALLOC_CHECK;
 }
 
-extern "C" void *__stdcall
+extern "C" void *__stdcall __attribute__ ((regparm(3)))
 ccalloc (cygheap_types x, DWORD n, DWORD size)
 {
   cygheap_entry *c;
@@ -324,7 +322,7 @@ ccalloc (cygheap_types x, DWORD n, DWORD size)
   return creturn (x, c, n);
 }
 
-extern "C" char *__stdcall
+extern "C" char *__stdcall __attribute__ ((regparm(1)))
 cstrdup (const char *s)
 {
   MALLOC_CHECK;
@@ -336,7 +334,7 @@ cstrdup (const char *s)
   return p;
 }
 
-extern "C" char *__stdcall
+extern "C" char *__stdcall __attribute__ ((regparm(1)))
 cstrdup1 (const char *s)
 {
   MALLOC_CHECK;
diff --git a/msys/rt/src/winsup/cygwin/dcrt0.cc b/msys/rt/src/winsup/cygwin/dcrt0.cc
index d3a67c7..cc417c1 100644
--- a/msys/rt/src/winsup/cygwin/dcrt0.cc
+++ b/msys/rt/src/winsup/cygwin/dcrt0.cc
@@ -955,10 +955,10 @@ _dll_crt0 ()
 	    }
 	  default:
 #if defined (__MSYS__)
-	    fork_info = NULL;
+	    si.lpReserved2 = NULL;
 #else /* !__MSYS__ */
 	    if (_cygwin_testing)
-	      fork_info = NULL;
+	      si.lpReserved2 = NULL;
 	    else if ((fork_info->type & PROC_MAGIC_MASK) == PROC_MAGIC_GENERIC)
 	      api_fatal ("conflicting versions of cygwin1.dll detected.  Use only the most recent version.\n");
 #endif /* !__MSYS__ */
@@ -1142,7 +1142,7 @@ __api_fatal (const char *fmt, ...)
 }
 
 #ifdef DEBUGGING
-void __stdcall
+void __stdcall __attribute__ ((regparm (1)))
 cygbench (const char *s)
 {
   TRACE_IN;
diff --git a/msys/rt/src/winsup/cygwin/debug.cc b/msys/rt/src/winsup/cygwin/debug.cc
index 41e525d..8956298 100644
--- a/msys/rt/src/winsup/cygwin/debug.cc
+++ b/msys/rt/src/winsup/cygwin/debug.cc
@@ -39,7 +39,7 @@ threadname_init ()
   threadname_lock = new_muto (FALSE, "threadname_lock");
 }
 
-void __stdcall
+void __stdcall __attribute__ ((regparm(1)))
 regthread (const char *name, DWORD tid)
 {
   lock_threadname ();
@@ -99,7 +99,7 @@ thread_stub (VOID *arg)
 
 /* Wrapper for CreateThread.  Registers the thread name/id and ensures that
    cygwin threads are properly initialized. */
-HANDLE __stdcall
+HANDLE __stdcall __attribute__ ((regparm(3)))
 makethread (LPTHREAD_START_ROUTINE start, LPVOID param, DWORD flags,
 	    const char *name)
 {
@@ -139,7 +139,7 @@ out:
 
 /* Return the symbolic name of the current thread for debugging.
  */
-const char * __stdcall
+const char * __stdcall __attribute__ ((regparm(2)))
 threadname (DWORD tid, int lockit)
 {
   const char *res = NULL;
@@ -251,7 +251,7 @@ out:
 }
 
 /* Add a handle to the linked list of known handles. */
-void __stdcall
+void __stdcall __attribute__ ((regparm (3)))
 add_handle (const char *func, int ln, HANDLE h, const char *name, bool inh)
 {
   handle_list *hl;
@@ -338,7 +338,7 @@ mark_closed (const char *func, int ln, HANDLE h, const char *name, BOOL force)
 
 /* Close a known handle.  Complain if !force and closing a known handle or
    if the name of the handle being closed does not match the registered name. */
-BOOL __stdcall
+BOOL __stdcall __attribute__ ((regparm (3)))
 close_handle (const char *func, int ln, HANDLE h, const char *name, BOOL force)
 {
   BOOL ret;
diff --git a/msys/rt/src/winsup/cygwin/debug.h b/msys/rt/src/winsup/cygwin/debug.h
index 9770e7f..d985df6 100644
--- a/msys/rt/src/winsup/cygwin/debug.h
+++ b/msys/rt/src/winsup/cygwin/debug.h
@@ -86,7 +86,7 @@ void __stdcall cygbench (const char *s) __attribute__ ((regparm (1)));
 extern "C" void console_printf (const char *fmt,...);
 void setclexec_pid (HANDLE, bool);
 void debug_fixup_after_fork ();
-extern int pinger;
+extern "C" int pinger;
 
 #endif /*DEBUGGING*/
 #endif /*_DEBUG_H_*/
diff --git a/msys/rt/src/winsup/cygwin/errno.cc b/msys/rt/src/winsup/cygwin/errno.cc
index 89e25ff..6aad140 100644
--- a/msys/rt/src/winsup/cygwin/errno.cc
+++ b/msys/rt/src/winsup/cygwin/errno.cc
@@ -111,7 +111,7 @@ errmap[] =
   { 0, NULL, 0}
 };
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(2)))
 geterrno_from_win_error (DWORD code, int deferrno)
 {
   for (int i = 0; errmap[i].w != 0; ++i)
@@ -128,7 +128,7 @@ geterrno_from_win_error (DWORD code, int deferrno)
 
 /* seterrno_from_win_error: Given a Windows error code, set errno
    as appropriate. */
-void __stdcall
+void __stdcall __attribute__ ((regparm(3)))
 seterrno_from_win_error (const char *file, int line, DWORD code)
 {
   syscall_printf ("%s:%d errno %d", file, line, code);
@@ -137,7 +137,7 @@ seterrno_from_win_error (const char *file, int line, DWORD code)
 }
 
 /* seterrno: Set `errno' based on GetLastError (). */
-void __stdcall
+void __stdcall __attribute__ ((regparm(2)))
 seterrno (const char *file, int line)
 {
   seterrno_from_win_error (file, line, GetLastError ());
@@ -145,7 +145,7 @@ seterrno (const char *file, int line)
 
 extern char *_user_strerror _PARAMS ((int));
 
-const NO_COPY char __declspec(dllexport) * const _sys_errlist[]=
+extern const NO_COPY char __declspec(dllexport) * const _sys_errlist[]=
 {
 /*      NOERROR 0       */ "No error",
 /*	EPERM 1		*/ "Not super-user",
@@ -287,7 +287,7 @@ const NO_COPY char __declspec(dllexport) * const _sys_errlist[]=
 /* ECASECLASH 137 */ "Filename exists with different case"
 };
 
-int const NO_COPY __declspec(dllexport) _sys_nerr =
+extern int const NO_COPY __declspec(dllexport) _sys_nerr =
   sizeof (_sys_errlist) / sizeof (_sys_errlist[0]);
 
 /* FIXME: Why is strerror() a long switch and not just:
diff --git a/msys/rt/src/winsup/cygwin/exceptions.cc b/msys/rt/src/winsup/cygwin/exceptions.cc
index 94b3a0b..ec1326b 100644
--- a/msys/rt/src/winsup/cygwin/exceptions.cc
+++ b/msys/rt/src/winsup/cygwin/exceptions.cc
@@ -675,7 +675,7 @@ static void __stdcall interrupt_setup (int sig, void *handler, DWORD retaddr,
 				       DWORD *retaddr_on_stack,
 				       struct sigaction& siga)
 		      __attribute__((regparm(3)));
-static void __stdcall
+static void __stdcall __attribute__((regparm(3)))
 interrupt_setup (int sig, void *handler, DWORD retaddr, DWORD *retaddr_on_stack,
 		 struct sigaction& siga)
 {
@@ -1127,7 +1127,7 @@ events_terminate (void)
 }
 
 extern "C" {
-static int __stdcall
+int __stdcall
 call_signal_handler_now ()
 {
   if (!sigsave.sig)
@@ -1142,10 +1142,12 @@ call_signal_handler_now ()
   sigdelayed0 ();
   return sa_flags & SA_RESTART;
 }
+#if 0
 /* This kludge seems to keep a copy of call_signal_handler_now around
    even when compiling with -finline-functions. */
 static int __stdcall call_signal_handler_now_dummy ()
   __attribute__((alias ("call_signal_handler_now")));
+#endif
 };
 
 int
@@ -1226,7 +1228,7 @@ _sigdelayed0:								\n\
 	popl	%%eax							\n\
 	jmp	*%%eax							\n\
 __no_sig_end:								\n\
-" : "=m" (sigsave.sig) : "m" (&_impure_ptr->_errno),
+" : "=m" (sigsave.sig) : "rm" (&_impure_ptr->_errno),
   "g" (sigsave.retaddr), "g" (sigsave.oldmask), "g" (sigsave.sig),
     "g" (sigsave.func), "o" (pid_offset), "g" (sigsave.saved_errno), "g" (sigsave.newmask)
 );
diff --git a/msys/rt/src/winsup/cygwin/fhandler.cc b/msys/rt/src/winsup/cygwin/fhandler.cc
index dc417ed..998a63f 100644
--- a/msys/rt/src/winsup/cygwin/fhandler.cc
+++ b/msys/rt/src/winsup/cygwin/fhandler.cc
@@ -828,7 +828,7 @@ fhandler_base::lock (int, struct flock *)
   return -1;
 }
 
-extern "C" char * __stdcall
+extern "C" char * __stdcall __attribute__ ((regparm(1)))
 rootdir(char *full_path)
 {
   TRACE_IN;
diff --git a/msys/rt/src/winsup/cygwin/include/wchar.h b/msys/rt/src/winsup/cygwin/include/wchar.h
deleted file mode 100644
index 682ef3f..0000000
--- a/msys/rt/src/winsup/cygwin/include/wchar.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/* wchar.h
-
-   Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
-
-This file is part of Cygwin.
-
-This software is a copyrighted work licensed under the terms of the
-Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
-details. */
-
-#ifndef _WCHAR_H
-#define _WCHAR_H
-
-#include <sys/cdefs.h>
-
-/* Get wchar_t and wint_t from <stddef.h>.  */
-#define __need_wchar_t
-#define __need_wint_t
-#define __need_size_t
-#include <stddef.h>
-#include <stdio.h>
-
-__BEGIN_DECLS
-
-int wcscmp (const wchar_t *__s1, const wchar_t *__s2);
-size_t wcslen (const wchar_t *__s1);
-
-__END_DECLS
-
-#endif /* _WCHAR_H */
diff --git a/msys/rt/src/winsup/cygwin/miscfuncs.cc b/msys/rt/src/winsup/cygwin/miscfuncs.cc
index 0811898..80604bf 100644
--- a/msys/rt/src/winsup/cygwin/miscfuncs.cc
+++ b/msys/rt/src/winsup/cygwin/miscfuncs.cc
@@ -56,7 +56,7 @@ const char case_folded_upper[] NO_COPY = {
 #define ch_case_eq(ch1, ch2) (cyg_tolower(ch1) == cyg_tolower(ch2))
 
 /* Return TRUE if two strings match up to length n */
-extern "C" int __stdcall
+extern "C" int __stdcall __attribute__ ((regparm(3)))
 strncasematch (const char *s1, const char *s2, size_t n)
 {
   if (s1 == s2)
@@ -73,7 +73,7 @@ strncasematch (const char *s1, const char *s2, size_t n)
 }
 
 /* Return TRUE if two strings match */
-extern "C" int __stdcall
+extern "C" int __stdcall __attribute__ ((regparm(2)))
 strcasematch (const char *s1, const char *s2)
 {
   if (s1 == s2)
@@ -88,7 +88,7 @@ strcasematch (const char *s1, const char *s2)
   return *s2 == '\0';
 }
 
-extern "C" char * __stdcall
+extern "C" char * __stdcall __attribute__ ((regparm(2)))
 strcasestr (const char *searchee, const char *lookfor)
 {
   if (*searchee == 0)
@@ -116,7 +116,7 @@ strcasestr (const char *searchee, const char *lookfor)
   return NULL;
 }
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(1)))
 check_null_empty_str (const char *name)
 {
   if (!name || IsBadStringPtr (name, MAX_PATH))
@@ -128,7 +128,7 @@ check_null_empty_str (const char *name)
   return 0;
 }
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(1)))
 check_null_empty_str_errno (const char *name)
 {
   int __err;
@@ -137,7 +137,7 @@ check_null_empty_str_errno (const char *name)
   return __err;
 }
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(1)))
 __check_null_invalid_struct (const void *s, unsigned sz)
 {
   if (!s || IsBadWritePtr ((void *) s, sz))
@@ -146,7 +146,7 @@ __check_null_invalid_struct (const void *s, unsigned sz)
   return 0;
 }
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(1)))
 __check_null_invalid_struct_errno (const void *s, unsigned sz)
 {
   int __err;
diff --git a/msys/rt/src/winsup/cygwin/path.cc b/msys/rt/src/winsup/cygwin/path.cc
index 77b6a1e..8a3be62 100644
--- a/msys/rt/src/winsup/cygwin/path.cc
+++ b/msys/rt/src/winsup/cygwin/path.cc
@@ -323,8 +323,7 @@ path_conv::add_ext_from_sym (symlink_info &sym)
     }
 }
 
-static void __stdcall mkrelpath (char *dst) __attribute__ ((regparm (2)));
-static void __stdcall
+static void __stdcall __attribute__ ((regparm (2)))
 mkrelpath (char *path)
 {
   TRACE_IN;
@@ -903,7 +902,7 @@ get_raw_device_number (const char *uxname, const char *w32path, int &unit)
   return devn;
 }
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(3)))
 get_device_number (const char *name, int &unit, BOOL from_conv)
 {
   TRACE_IN;
@@ -1149,7 +1148,7 @@ backslashify (const char *src, char *dst, int trailing_slash_p)
 /* nofinalslash: Remove trailing / and \ from SRC (except for the
    first one).  It is ok for src == dst.  */
 
-void __stdcall
+void __stdcall __attribute__ ((regparm(2)))
 nofinalslash (const char *src, char *dst)
 {
   TRACE_IN;
@@ -1162,7 +1161,7 @@ nofinalslash (const char *src, char *dst)
 
 /* slash_unc_prefix_p: Return non-zero if PATH begins with //UNC/SHARE */
 
-int __stdcall
+int __stdcall __attribute__ ((regparm(1)))
 slash_unc_prefix_p (const char *path)
 {
   TRACE_IN;
@@ -2706,7 +2705,7 @@ readlink (const char *path, char *buf, int buflen)
    the directory.  FIXME: Not bullet-proof. */
 /* Cygwin internal */
 
-unsigned long __stdcall
+unsigned long __stdcall __attribute__ ((regparm(2)))
 hash_path_name (unsigned long hash, const char *name)
 {
   TRACE_IN;
diff --git a/msys/rt/src/winsup/cygwin/perthread.h b/msys/rt/src/winsup/cygwin/perthread.h
index 185cc04..738a301 100644
--- a/msys/rt/src/winsup/cygwin/perthread.h
+++ b/msys/rt/src/winsup/cygwin/perthread.h
@@ -13,7 +13,7 @@ details. */
 #define PTMAGIC 0x77366377
 
 struct _reent;
-extern struct _reent reent_data;
+extern "C" struct _reent reent_data;
 
 extern DWORD *__stackbase __asm__ ("%fs:4");
 
diff --git a/msys/rt/src/winsup/cygwin/sigproc.cc b/msys/rt/src/winsup/cygwin/sigproc.cc
index 5c31322..5512e6f 100644
--- a/msys/rt/src/winsup/cygwin/sigproc.cc
+++ b/msys/rt/src/winsup/cygwin/sigproc.cc
@@ -195,7 +195,7 @@ proc_can_be_signalled (_pinfo *p)
 	  (PID_ACTIVE | PID_IN_USE));
 }
 
-BOOL __stdcall
+BOOL __stdcall __attribute__ ((regparm(1)))
 pid_exists (pid_t pid)
 {
   TRACE_IN;
@@ -205,7 +205,7 @@ pid_exists (pid_t pid)
 
 /* Test to determine if a process really exists and is processing signals.
  */
-BOOL __stdcall
+BOOL __stdcall __attribute__ ((regparm(1)))
 proc_exists (_pinfo *p)
 {
   TRACE_IN;
@@ -661,7 +661,7 @@ sigproc_terminate (void)
  * If sending to this process, wait for notification that a signal has
  * completed before returning.
  */
-int __stdcall
+int __stdcall __attribute__ ((regparm(3)))
 sig_send (_pinfo *p, int sig, DWORD ebp, bool exception)
 {
   TRACE_IN;
@@ -1353,7 +1353,7 @@ extern "C" {
 
 #undef WaitForSingleObject
 
-DWORD __stdcall
+DWORD __stdcall __attribute ((regparm(2)))
 WFSO (HANDLE hHandle, DWORD dwMilliseconds)
 {
   TRACE_IN;
@@ -1365,7 +1365,7 @@ WFSO (HANDLE hHandle, DWORD dwMilliseconds)
 
 #undef WaitForMultipleObjects
 
-DWORD __stdcall
+DWORD __stdcall __attribute ((regparm(3)))
 WFMO (DWORD nCount, CONST HANDLE *lpHandles, BOOL fWaitAll, DWORD dwMilliseconds)
 {
   TRACE_IN;
diff --git a/msys/rt/src/winsup/cygwin/spawn.cc b/msys/rt/src/winsup/cygwin/spawn.cc
index 342159f..1e1309d 100644
--- a/msys/rt/src/winsup/cygwin/spawn.cc
+++ b/msys/rt/src/winsup/cygwin/spawn.cc
@@ -82,7 +82,7 @@ perhaps_suffix (const char *prog, path_conv &buf)
    of name is placed in buf and returned.  Otherwise the contents of buf
    is undefined and NULL is returned.  */
 
-const char * __stdcall
+const char * __stdcall  __attribute__ ((regparm(3)))
 find_exec (const char *name, path_conv& buf, const char *mywinenv,
 	   int null_if_notfound, const char **known_suffix)
 {
diff --git a/msys/rt/src/winsup/cygwin/syscalls.cc b/msys/rt/src/winsup/cygwin/syscalls.cc
index 3b7493c..50ca770 100644
--- a/msys/rt/src/winsup/cygwin/syscalls.cc
+++ b/msys/rt/src/winsup/cygwin/syscalls.cc
@@ -232,7 +232,7 @@ setsid (void)
   return -1;
 }
 
-extern "C" ssize_t
+extern "C" _ssize_t
 _read (int fd, void *ptr, size_t len)
 {
   TRACE_IN;
@@ -292,7 +292,7 @@ _read (int fd, void *ptr, size_t len)
   return res;
 }
 
-extern "C" ssize_t
+extern "C" _ssize_t
 _write (int fd, const void *ptr, size_t len)
 {
   int res = -1;
diff --git a/msys/rt/src/winsup/cygwin/winsup.h b/msys/rt/src/winsup/cygwin/winsup.h
index 162c586..ecc5f54 100644
--- a/msys/rt/src/winsup/cygwin/winsup.h
+++ b/msys/rt/src/winsup/cygwin/winsup.h
@@ -237,7 +237,7 @@ ssize_t check_iovec_for_write (const struct iovec *, int) __attribute__ ((regpar
 #define set_winsock_errno() __set_winsock_errno (__FUNCTION__, __LINE__)
 void __set_winsock_errno (const char *fn, int ln) __attribute__ ((regparm(2)));
 
-extern bool wsock_started;
+extern "C" bool wsock_started;
 
 /* Printf type functions */
 extern "C" void __api_fatal (const char *, ...) __attribute__ ((noreturn));
-- 
2.0.0.msysgit.0

